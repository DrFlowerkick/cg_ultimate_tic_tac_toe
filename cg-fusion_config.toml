# impl config file in TOML format to configure impl items of specific impl blocks to
# include in or exclude from challenge.
# file structure:
# [impl_items]
# include = [include_item_1, include_item_2]
# exclude = [exclude_item_1, exclude_item_2]
# [impl_blocks]
# include = [include_impl_block_1, include_impl_block_2]
# exclude = [exclude_impl_block_1, exclude_impl_block_2]
#
# If in conflict with other impl options (item or block), the 'include' option always wins.
#
# --- impl items of impl blocks ---
# impl items are identified by their plain name, e.g.
# fn my_function() --> my_function
# const MY_CONST --> MY_CONST
# If the name of the impl item is ambiguous (e.g. push(), next(), etc.), add the fully
# qualified name of the impl block containing the impl item. Use the following naming
# schema:
# impl_item_name@fully_qualified_name_of_impl_block
#
# A fully qualified name of an impl block consists of up to four components:
# 1. impl with lifetime and type parameters if applicable, e.g. impl<'a, T: Display>
# 2. if impl with a trait, than path to trait with lifetime and type parameters if applicable and 'for' keyword, e.g.
#    convert::From<&str> for
# 3. path to user defined type with lifetime and type parameters if applicable referenced by impl
#    block, e.g. map::TwoDim<X, Y>
# 4. if impl has a where clause, than where clause for type parameters, e.g. where D: Display
#
# Specify the components without any whitespace with the exception of one space between trait and
# 'for' keyword. The components are separated each by one space.
# Example 1: impl<constX:usize,constY:usize> map::TwoDim<X,Y>
# Example 2: impl<'a> From<&'astr> for FooType<'a>
# Example 3: impl<D> MyPrint for MyType<D> whereD:Display
#
# Usage of wildcard '*' for impl item name is possible, but requires a fully qualified name of an
# impl block, e.g.: *@impl StructFoo
# This will include all impl items of the corresponding impl block(s)
#
# --- impl block ---
# cg-fusion uses a simple approach to identify required items of src code, which is in most cases not
# capable of identifying dependencies on traits like Display or From. To include these traits in the
# fusion of challenge, add all required impl blocks by their fully qualified name (see above) to the
# configuration. If an impl block with a trait is included, than all items of the impl block will be
# required by fusion of challenge.
# If you configure an impl block without a trait, the impl items of this block will be added to the
# impl user dialog. If you want to avoid this dialog, add the required impl items with the above impl
# item include options to the configuration. In this case you do not need to add the corresponding
# impl block to the configuration, because every impl block, which contains required items, will be
# pulled into the fusion automatically.
[impl_items]
include = [
    "add_child@impl<G,UP,UC,EP,H> PlainNode<G,UP,UC,EP,H> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,",
    "allowed_children",
    "apply_player_move",
    "count_non_vacant_cells",
    "count_player_cells",
    "execute_action",
    "execute_player_action",
    "forward_x",
    "get@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "get_cell_value@impl TicTacToeGameData",
    "get_children",
    "get_first_vacant_cell",
    "get_mut@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "get_status",
    "get_threats",
    "is_not_vacant",
    "is_vacant",
    "iter@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "iter_column@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "iter_map",
    "iter_row@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "new@impl<G,UP,UC,EP,H,SP> PlainMCTS<G,UP,UC,EP,H,SP> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,SP:SimulationPolicy<G,H>,",
    "new@impl<G,UP,UC,EP,H> PlainNode<G,UP,UC,EP,H> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,",
    "next_player@impl TwoPlayer",
    "next_player@impl UltTTT",
    "root_node",
    "set_tie",
    "swap_value",
    "x",
    "y"
]
exclude = [
    "get_cell_value@impl UltTTT",
    "iter_diagonal_top_left@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>",
    "iter_diagonal_top_right@impl<T:Copy+Clone+Default,constX:usize,constY:usize> MyMap2D<T,X,Y>"
]
[impl_blocks]
include = [
    "impl Heuristic<UltTTTMCTSGame> for UltTTTHeuristic",
    "impl MCTSPlayer for TwoPlayer",
    "impl TicTacToeStatus",
    "impl TwoPlayer",
    "impl<'a> Iterator for IterUltTTT<'a>",
    "impl<G,UP,UC,EP,H,SP> MCTSAlgo<G> for PlainMCTS<G,UP,UC,EP,H,SP> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,SP:SimulationPolicy<G,H>,",
    "impl<G,UP,UC,EP,H,SP> PlainMCTS<G,UP,UC,EP,H,SP> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,SP:SimulationPolicy<G,H>,",
    "impl<G,UP,UC,EP,H> MCTSNode<G> for PlainNode<G,UP,UC,EP,H> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,",
    "impl<G,UP,UC,EP,H> PlainNode<G,UP,UC,EP,H> whereG:MCTSGame,UP:UCTPolicy<G>,UC:UTCCache<G,UP>,EP:ExpansionPolicy<G>,H:Heuristic<G>,",
    "impl<G:MCTSGame,UP:UCTPolicy<G>> UTCCache<G,UP> for CachedUTC",
    "impl<G:MCTSGame> Heuristic<G> for NoHeuristic",
    "impl<G:MCTSGame> HeuristicCache<G> for NoHeuristicCache",
    "impl<G:MCTSGame> UCTPolicy<G> for DynamicC",
    "impl<State,Move> GameCache<State,Move> for NoGameCache<State,Move>",
    "impl<T:Copy+Clone+Default,constX:usize,constY:usize> Default for MyMap2D<T,X,Y>",
    "impl<constC:usize,constAN:usize,constAD:usize,G:MCTSGame> ExpansionPolicy<G> for ProgressiveWidening<C,AN,AD,G>",
    "impl<constC:usize,constAN:usize,constAD:usize,G:MCTSGame> ProgressiveWidening<C,AN,AD,G>",
    "impl<constMXD:usize,G:MCTSGame,H:Heuristic<G>> SimulationPolicy<G,H> for HeuristicCutoff<MXD>",
    "impl<constX:usize,constY:usize> From<(usize,usize)> for MapPoint<X,Y>",
    "impl<constX:usize,constY:usize> PartialOrd for MapPoint<X,Y>"
]
exclude = [
    "impl Display for UltTTT",
    "impl GameCache<TicTacToeGame,TicTacToePlayerAction> for TicTacToeGameCache",
    "impl MCTSGame for TicTacToeMCTSGame",
    "impl std::fmt::Display for TicTacToeGameData",
    "impl std::fmt::Display for TicTacToeStatus",
    "impl<G:MCTSGame,H:Heuristic<G>> SimulationPolicy<G,H> for DefaultSimulationPolicy",
    "impl<G:MCTSGame,UP:UCTPolicy<G>> UTCCache<G,UP> for NoUTCCache",
    "impl<G:MCTSGame> ExpansionPolicy<G> for ExpandAll<G>",
    "impl<G:MCTSGame> UCTPolicy<G> for StaticC",
    "impl<T:Copy+Clone+Default+Display,constX:usize,constY:usize> Display for MyMap2D<T,X,Y>",
    "impl<T:Copy+Clone+Default+From<char>,constX:usize,constY:usize> From<&str> for MyMap2D<T,X,Y>",
    "impl<constX:usize,constY:usize> Display for MapPoint<X,Y>",
    "impl<constX:usize,constY:usize> From<MapPoint<X,Y>> for (usize,usize)",
    "impl<constX:usize,constY:usize> From<MapPoint<X,Y>> for Point",
    "impl<constX:usize,constY:usize> TryFrom<Point> for MapPoint<X,Y>"
]
